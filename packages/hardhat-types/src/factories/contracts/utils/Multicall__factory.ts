/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../contracts/utils/Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e657806386d516e8146100ec578063a8b0574e146100f2578063ee82ac5e1461010057600080fd5b80630f28c97d1461008d578063252dba42146100a257806327e86d6e146100c35780634d2301cc146100cb575b600080fd5b425b6040519081526020015b60405180910390f35b6100b56100b03660046102e6565b610112565b604051610099929190610468565b61008f610247565b61008f6100d93660046104ea565b6001600160a01b03163190565b4461008f565b4561008f565b604051418152602001610099565b61008f61010e36600461050c565b4090565b8051439060609067ffffffffffffffff8111156101315761013161025a565b60405190808252806020026020018201604052801561016457816020015b606081526020019060019003908161014f5790505b50905060005b83518110156102415760008085838151811061018857610188610525565b6020026020010151600001516001600160a01b03168684815181106101af576101af610525565b6020026020010151602001516040516101c8919061053b565b6000604051808303816000865af19150503d8060008114610205576040519150601f19603f3d011682016040523d82523d6000602084013e61020a565b606091505b50915091508161021957600080fd5b8084848151811061022c5761022c610525565b6020908102919091010152505060010161016a565b50915091565b6000610254600143610557565b40905090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156102935761029361025a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102c2576102c261025a565b604052919050565b80356001600160a01b03811681146102e157600080fd5b919050565b600060208083850312156102f957600080fd5b823567ffffffffffffffff8082111561031157600080fd5b818501915085601f83011261032557600080fd5b8135818111156103375761033761025a565b8060051b610346858201610299565b918252838101850191858101908984111561036057600080fd5b86860192505b838310156104375782358581111561037e5760008081fd5b86016040601f19828d0381018213156103975760008081fd5b61039f610270565b6103aa8b85016102ca565b815282840135898111156103be5760008081fd5b8085019450508d603f8501126103d45760008081fd5b8a840135898111156103e8576103e861025a565b6103f88c84601f84011601610299565b92508083528e8482870101111561040f5760008081fd5b808486018d85013760009083018c0152808b0191909152845250509186019190860190610366565b9998505050505050505050565b60005b8381101561045f578181015183820152602001610447565b50506000910152565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156104dc57878603605f19018452815180518088526104bd81888a01898501610444565b601f01601f191696909601850195509284019290840190600101610496565b509398975050505050505050565b6000602082840312156104fc57600080fd5b610505826102ca565b9392505050565b60006020828403121561051e57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b6000825161054d818460208701610444565b9190910192915050565b8181038181111561057857634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212209b9ac8b4ef3cf3e580ca92c892a040f6d9b744bb7f7018b86d6bcc747e8193ba64736f6c63430008180033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
